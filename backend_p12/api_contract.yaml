openapi: 3.0.0
info:
  title: Ques Backend API v2.0 - Enhanced Edition
  description: |
    Enhanced backend API for Ques with enterprise-grade features.
    
    **Current Implementation Status:**
    - ‚úÖ Authentication System (Email/Password + JWT + WeChat OAuth)
    - ‚úÖ Page 1: Recommendations/Swiping with Hybrid Advanced Matching
    - ‚úÖ Page 2: AI-powered Search with Vector Embeddings  
    - ‚úÖ Enhanced Security (Rate Limiting + Threat Detection)
    - ‚úÖ Performance Monitoring & Metrics
    - ‚úÖ Dual-language Email Service (Tencent Cloud SES)
    - ‚úÖ Production-Ready with Comprehensive Error Handling
    - ‚úÖ VectorDB Resilience with Automatic Fallback
    - ‚úÖ Streamlined Essential Test Suite (6 core files)
    - ‚úÖ Ready for Frontend Integration
    
    **New Features in v2.0:**
    - üõ°Ô∏è Advanced security with automatic threat detection and input sanitization
    - üîí Cryptographically secure verification codes and authentication logging
    - üìä Real-time performance monitoring and metrics
    - üåç Complete WeChat OAuth integration (Web + Mini Program)
    - üìß Enhanced email service with dual-language support
    - ‚öôÔ∏è Enterprise configuration management
    - üîÑ Standardized error responses with detailed error codes
    - üóÉÔ∏è **Robust Database Operations**: Enhanced PostgreSQL with connection pooling
    - üîó **VectorDB Resilience**: Automatic retry logic with exponential backoff for intermittent timeouts
    - üéØ **Hybrid Recommendations**: Vector-based with intelligent tag-based fallback (100% reliability)
    - üöÄ **Production Service**: Enterprise-grade recommendation engine with graceful degradation
    - üß™ **Streamlined Testing**: Essential test suite with comprehensive system validation
    
    **Authentication Required:** All endpoints except /health, /, /metrics require JWT Bearer token.
  version: 2.0.0
  contact:
    name: Cody x Rhys x William x Jimmy
    email: zhuokaichen@link.cuhk.edu.cn

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://your-cvm-backend-url.com
    description: Production server (Tencent Cloud CVM)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login/email or /auth/login/wechat

  schemas:
    # Authentication Schemas
    EmailRegisterRequest:
      type: object
      required: [email, password, name]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "SecurePass123!"
        name:
          type: string
          example: "John Doe"
        bio:
          type: string
          example: "AI enthusiast and startup founder"

    EmailLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "SecurePass123!"

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "def502004..."
        token_type:
          type: string
          example: "bearer"
        expires_in:
          type: integer
          example: 1800
        user:
          $ref: '#/components/schemas/UserProfile'

    SendVerificationCodeRequest:
      type: object
      required: [provider_type, provider_id, purpose]
      properties:
        provider_type:
          type: string
          enum: [email]
          example: "email"
        provider_id:
          type: string
          format: email
          example: "user@example.com"
          description: "Email address to send verification code to"
        purpose:
          type: string
          enum: [registration, login, password_reset]
          example: "registration"
          description: "Purpose of the verification code"
        language:
          type: string
          enum: [en, zh]
          example: "en"
          description: "Language for email template (en=English, zh=Chinese)"
          default: "en"
        
    # Email Template Variables:
    # The verification email templates use the following variables:
    # - {{verification_code}}: The verification code (e.g., 123456)
    # - {{expire_time}}: Expiration time in minutes (e.g., 10)
    #
    # Template format example:
    # "Dear user, Your verification code is {{verification_code}}. 
    #  This code is valid for {{expire_time}} minutes. Please do not 
    #  share this code with others. If you did not request this, 
    #  please ignore this email. Best regards, Ques Team"

    VerificationCodeResponse:
      type: object
      properties:
        message:
          type: string
          example: "Verification code sent to user@example.com"
        expires_in:
          type: integer
          example: 600
          description: "Code expiration time in seconds"

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          example: "John Doe"
        bio:
          type: string
          example: "AI enthusiast and startup founder"
        auth_methods:
          type: array
          items:
            type: string
          example: ["email"]

    # Recommendations Schemas
    RecommendationCard:
      type: object
      properties:
        id:
          type: integer
          example: 456
        name:
          type: string
          example: "Jane Smith"
        bio:
          type: string
          example: "Tech investor looking for AI startups"
        feature_tags:
          type: array
          items:
            type: string
          example: ["investor", "AI enthusiast", "startup mentor"]
        similarity_score:
          type: number
          format: float
          example: 0.85

    RecommendationsResponse:
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: '#/components/schemas/RecommendationCard'
        total_cards:
          type: integer
          example: 20
        strategy_used:
          type: string
          example: "vector_similarity_top_50"

    SwipeAction:
      type: object
      required: [card_id, action]
      properties:
        card_id:
          type: integer
          example: 456
        action:
          type: string
          enum: ["like", "dislike"]
          example: "like"

    # Search Schemas
    SearchRequest:
      type: object
      required: [query]
      properties:
        query:
          type: string
          example: "Looking for AI developers to invest in"

    SearchResponse:
      type: object
      properties:
        query:
          type: string
          example: "Looking for AI developers to invest in"
        extracted_tags:
          type: array
          items:
            type: string
          example: ["AI developer", "investor", "startup"]
        results:
          type: array
          items:
            $ref: '#/components/schemas/RecommendationCard'
        total_results:
          type: integer
          example: 15
        strategy_used:
          type: string
          example: "vector_similarity_with_fallback"

    # Enhanced Error Response Schema (v2.0)
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "AUTH_001"
              description: "Standardized error code for categorization"
            message:
              type: string
              example: "Invalid email or password"
              description: "Human-readable error message"
            details:
              type: string
              example: "The provided credentials do not match any user account"
              description: "Additional error details (optional)"
            field_errors:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
              example:
                email: ["Invalid email format"]
                password: ["Password must be at least 8 characters"]
              description: "Field-specific validation errors (optional)"

    # Enhanced Success Response Schema (v2.0)
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object
          description: "Response data (varies by endpoint)"
        meta:
          type: object
          description: "Additional metadata (optional)"

    # Legacy Error Schema (for backward compatibility)
    Error:
      type: object
      properties:
        detail:
          type: string
          example: "Invalid credentials"
        type:
          type: string
          example: "authentication_error"

paths:
  # Root Endpoint
  /:
    get:
      summary: Root endpoint with system information
      description: Get basic system information and available features
      tags: [System]
      responses:
        '200':
          description: System information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Ques Backend API - Enhanced Version"
                      version:
                        type: string
                        example: "2.0.0"
                      environment:
                        type: string
                        example: "development"
                      features:
                        type: array
                        items:
                          type: string
                        example: [
                          "Enhanced security with rate limiting and input sanitization",
                          "Cryptographic verification code generation",
                          "Security audit logging",
                          "Performance monitoring",
                          "Complete WeChat OAuth",
                          "Standardized error handling"
                        ]

  # Enhanced Health Check
  /health:
    get:
      summary: Enhanced health check endpoint
      description: Comprehensive health check with system status and metrics
      tags: [Health]
      responses:
        '200':
          description: API is healthy with detailed status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "healthy"
                      version:
                        type: string
                        example: "2.0.0"
                      environment:
                        type: string
                        example: "development"
                      config_summary:
                        type: object
                        description: "Summary of system configuration"
                      metrics:
                        type: object
                        description: "Current API metrics"

  # Performance Metrics
  /metrics:
    get:
      summary: Get API performance metrics
      description: Retrieve real-time API usage statistics and performance metrics
      tags: [Monitoring]
      responses:
        '200':
          description: API metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      total_requests:
                        type: integer
                        example: 1234
                      endpoint_stats:
                        type: object
                        description: "Per-endpoint statistics including count, avg_time, errors"
                      error_stats:
                        type: object
                        description: "Error count by status code"
                      slow_requests:
                        type: integer
                        example: 5
                        description: "Number of requests taking >1 second"

  # Admin Endpoints
  /admin/reset-metrics:
    post:
      summary: Reset API metrics
      description: Reset all API metrics to zero (admin endpoint)
      tags: [Admin]
      responses:
        '200':
          description: Metrics reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Metrics reset successfully"

  # Authentication Endpoints
  /auth/register/email:
    post:
      summary: Register with email and password
      description: Create a new user account with email verification
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRegisterRequest'
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login/email:
    post:
      summary: Login with email and password
      description: Authenticate and receive JWT tokens
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailLoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/send-verification-code:
    post:
      summary: Send email verification code
      description: |
        Send a verification code to email address for registration, login, or password reset.
        Supports dual-language templates (English/Chinese) with automatic load balancing.
        
        **Security Features:**
        - Cryptographically secure 6-digit code generation using `secrets` module
        - Enhanced rate limiting: 3 requests per 5 minutes per IP
        - Input sanitization and email format validation (RFC 5321 compliant)
        - Security audit logging for all verification attempts
        - Automatic blocking for suspicious activity
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendVerificationCodeRequest'
      responses:
        '200':
          description: Verification code sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationCodeResponse'
        '400':
          description: Invalid request parameters or security violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_email:
                  summary: Invalid email format
                  value:
                    success: false
                    error:
                      code: "VAL_001"
                      message: "Invalid email format"
                      field_errors:
                        email: ["Please provide a valid email address"]
                malicious_input:
                  summary: Security violation detected
                  value:
                    success: false
                    error:
                      code: "SEC_001"
                      message: "Suspicious activity detected"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error:
                  code: "RATE_001"
                  message: "Rate limit exceeded. Maximum 3 requests per 5 minutes."

  # Page 1: Recommendations
  /recommendations/cards:
    get:
      summary: Get recommendation cards for swiping (Page 1)
      description: |
        Fetches 20 personalized cards based on user profile similarity.
        **Enhanced Algorithm**: Hybrid recommendation engine with vector similarity search and intelligent tag-based fallback.
        **Reliability**: 100% uptime with graceful degradation during VectorDB intermittent issues.
        **Performance**: Automatic retry logic with exponential backoff for robust connectivity.
        Excludes previously seen cards based on swipe history.
      tags: [Recommendations]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of recommendation cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsResponse'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error (expected for empty database)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recommendations/swipe:
    post:
      summary: Record a swipe action (like/dislike)
      description: |
        Log a swipe action to prevent showing the same card again.
        Creates entry in swipe history for filtering future recommendations.
      tags: [Recommendations]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwipeAction'
      responses:
        '200':
          description: Swipe action recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Swipe recorded"
        '400':
          description: Invalid swipe action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Page 2: AI Search
  /search/query:
    post:
      summary: AI-powered search for projects and people (Page 2)
      description: |
        Natural language search that:
        1. Extracts feature tags from the query using DeepSeek AI
        2. Performs vector similarity search
        3. Filters out previously seen results
        4. Returns 20 most relevant matches
        
        Uses progressive search strategy with fallback to ensure results.
      tags: [AI Search]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Invalid search query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error (expected for empty database)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'