openapi: 3.0.0
info:
  title: Project Tinder Backend API
  description: |
    Backend API for a "Tinder for Projects" mobile app to discover, like, and search projects/partners.
    
    **Current Implementation Status:**
    - ✅ Authentication System (Email/Password + JWT)
    - ✅ Page 1: Recommendations/Swiping
    - ✅ Page 2: AI-powered Search
    - ✅ Database & Security
    - ✅ Ready for Frontend Integration
    
    **Authentication Required:** All endpoints except /health require JWT Bearer token.
  version: 1.0.0
  contact:
    name: Cody x Rhys x William x Jimmy
    email: zhuokaichen@link.cuhk.edu.cn

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://your-cvm-backend-url.com
    description: Production server (Tencent Cloud CVM)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login/email

  schemas:
    # Authentication Schemas
    EmailRegisterRequest:
      type: object
      required: [email, password, name]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "SecurePass123!"
        name:
          type: string
          example: "John Doe"
        bio:
          type: string
          example: "AI enthusiast and startup founder"

    EmailLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "SecurePass123!"

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "def502004..."
        token_type:
          type: string
          example: "bearer"
        expires_in:
          type: integer
          example: 1800
        user:
          $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          example: "John Doe"
        bio:
          type: string
          example: "AI enthusiast and startup founder"
        auth_methods:
          type: array
          items:
            type: string
          example: ["email"]

    # Recommendations Schemas
    RecommendationCard:
      type: object
      properties:
        id:
          type: integer
          example: 456
        name:
          type: string
          example: "Jane Smith"
        bio:
          type: string
          example: "Tech investor looking for AI startups"
        feature_tags:
          type: array
          items:
            type: string
          example: ["investor", "AI enthusiast", "startup mentor"]
        similarity_score:
          type: number
          format: float
          example: 0.85

    RecommendationsResponse:
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: '#/components/schemas/RecommendationCard'
        total_cards:
          type: integer
          example: 20
        strategy_used:
          type: string
          example: "vector_similarity_top_50"

    SwipeAction:
      type: object
      required: [card_id, action]
      properties:
        card_id:
          type: integer
          example: 456
        action:
          type: string
          enum: ["like", "dislike"]
          example: "like"

    # Search Schemas
    SearchRequest:
      type: object
      required: [query]
      properties:
        query:
          type: string
          example: "Looking for AI developers to invest in"

    SearchResponse:
      type: object
      properties:
        query:
          type: string
          example: "Looking for AI developers to invest in"
        extracted_tags:
          type: array
          items:
            type: string
          example: ["AI developer", "investor", "startup"]
        results:
          type: array
          items:
            $ref: '#/components/schemas/RecommendationCard'
        total_results:
          type: integer
          example: 15
        strategy_used:
          type: string
          example: "vector_similarity_with_fallback"

    # Common Error Schema
    Error:
      type: object
      properties:
        detail:
          type: string
          example: "Invalid credentials"
        type:
          type: string
          example: "authentication_error"

paths:
  # Health Check
  /health:
    get:
      summary: Health check endpoint
      description: Check if the API is running
      tags: [Health]
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  message:
                    type: string
                    example: "Backend is running"
                  version:
                    type: string
                    example: "1.0.0"
                  environment:
                    type: string
                    example: "development"

  # Authentication Endpoints
  /auth/register/email:
    post:
      summary: Register with email and password
      description: Create a new user account with email verification
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRegisterRequest'
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login/email:
    post:
      summary: Login with email and password
      description: Authenticate and receive JWT tokens
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailLoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Page 1: Recommendations
  /recommendations/cards:
    get:
      summary: Get recommendation cards for swiping (Page 1)
      description: |
        Fetches 20 personalized cards based on user profile similarity.
        Uses progressive search strategy to ensure results are always available.
        Excludes previously seen cards based on swipe history.
      tags: [Recommendations]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of recommendation cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsResponse'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error (expected for empty database)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recommendations/swipe:
    post:
      summary: Record a swipe action (like/dislike)
      description: |
        Log a swipe action to prevent showing the same card again.
        Creates entry in swipe history for filtering future recommendations.
      tags: [Recommendations]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwipeAction'
      responses:
        '200':
          description: Swipe action recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Swipe recorded"
        '400':
          description: Invalid swipe action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Page 2: AI Search
  /search/query:
    post:
      summary: AI-powered search for projects and people (Page 2)
      description: |
        Natural language search that:
        1. Extracts feature tags from the query using DeepSeek AI
        2. Performs vector similarity search
        3. Filters out previously seen results
        4. Returns 20 most relevant matches
        
        Uses progressive search strategy with fallback to ensure results.
      tags: [AI Search]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Invalid search query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error (expected for empty database)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'