"""add_dating_app_tables

Revision ID: bd12f80cb353
Revises: 26efd846c7f5
Create Date: 2025-07-26 11:24:44.207915

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bd12f80cb353'
down_revision: Union[str, Sequence[str], None] = '26efd846c7f5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create users table
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('bio', sa.String(length=500), nullable=True),
    sa.Column('verification_status', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=False)
    
    # Create matches table
    op.create_table('matches',
    sa.Column('match_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user1_id', sa.Integer(), nullable=False),
    sa.Column('user2_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user1_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['user2_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('match_id')
    )
    op.create_index(op.f('ix_matches_match_id'), 'matches', ['match_id'], unique=False)
    
    # Create user_features table
    op.create_table('user_features',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('tags', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'tags')
    )
    
    # Create user_links table
    op.create_table('user_links',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('links', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'links')
    )
    
    # Create user_swipes table
    op.create_table('user_swipes',
    sa.Column('swipe_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('swiper_id', sa.Integer(), nullable=False),
    sa.Column('target_id', sa.Integer(), nullable=False),
    sa.Column('direction', sa.String(length=10), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['swiper_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('swipe_id')
    )
    op.create_index(op.f('ix_user_swipes_swipe_id'), 'user_swipes', ['swipe_id'], unique=False)
    
    # Create messages table  
    op.create_table('messages',
    sa.Column('message_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('match_id', sa.Integer(), nullable=False),
    sa.Column('sender_id', sa.Integer(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['match_id'], ['matches.match_id'], ),
    sa.ForeignKeyConstraint(['sender_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('message_id')
    )
    op.create_index(op.f('ix_messages_message_id'), 'messages', ['message_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('feature_tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False))
    op.add_column('users', sa.Column('vector_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.alter_column('users', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'verification_status')
    op.drop_column('users', 'user_id')
    op.add_column('messages', sa.Column('chat_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('messages', sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('messages', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('messages', sa.Column('read', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'messages', type_='foreignkey')
    op.drop_constraint(None, 'messages', type_='foreignkey')
    op.create_foreign_key(op.f('messages_chat_id_fkey'), 'messages', 'chats', ['chat_id'], ['id'])
    op.create_foreign_key(op.f('messages_sender_id_fkey'), 'messages', 'users', ['sender_id'], ['id'])
    op.drop_index(op.f('ix_messages_message_id'), table_name='messages')
    op.create_index(op.f('ix_messages_id'), 'messages', ['id'], unique=False)
    op.drop_column('messages', 'is_read')
    op.drop_column('messages', 'text')
    op.drop_column('messages', 'match_id')
    op.drop_column('messages', 'message_id')
    op.drop_constraint(None, 'likes', type_='foreignkey')
    op.create_foreign_key(op.f('likes_liker_id_fkey'), 'likes', 'users', ['liker_id'], ['id'])
    op.create_table('chats',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user1_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user2_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('like_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['like_id'], ['likes.id'], name=op.f('chats_like_id_fkey')),
    sa.ForeignKeyConstraint(['user1_id'], ['users.id'], name=op.f('chats_user1_id_fkey')),
    sa.ForeignKeyConstraint(['user2_id'], ['users.id'], name=op.f('chats_user2_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('chats_pkey'))
    )
    op.create_index(op.f('ix_chats_id'), 'chats', ['id'], unique=False)
    op.drop_index(op.f('ix_user_swipes_swipe_id'), table_name='user_swipes')
    op.drop_table('user_swipes')
    op.drop_table('user_links')
    op.drop_table('user_features')
    op.drop_index(op.f('ix_matches_match_id'), table_name='matches')
    op.drop_table('matches')
    # ### end Alembic commands ###
